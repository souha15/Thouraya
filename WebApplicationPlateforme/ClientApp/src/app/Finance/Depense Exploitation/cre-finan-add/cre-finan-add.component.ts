import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';
import { ProgressStatus } from '../../../shared/Interfaces/progress-status';
import { UserServiceService } from '../../../shared/Services/User/user-service.service';
import { TbListeningService } from '../../../shared/Services/Evenements/tb-listening.service';
import { CreanceFinaciereService } from '../../../shared/Services/Finance/creance-finaciere.service';
import { ToastrService } from 'ngx-toastr';
import { UploadDownloadService } from '../../../shared/Services/Taches/upload-download.service';
import { PathSharedService } from '../../../shared/path-shared.service';
import { HttpClient, HttpEventType } from '@angular/common/http';
import { TbListening } from '../../../shared/Models/Evenements/tb-listening.model';
import { CreanceFinanciere } from '../../../shared/Models/Finance/creance-financiere.model';
import { NgForm } from '@angular/forms';
import { PiecesJointesCF } from '../../../shared/Models/Finance/pieces-jointes-cf.model';
import { ProgressStatusEnum } from '../../../shared/Enum/progress-status-enum.enum';
import { AdministrationService } from '../../../shared/Services/Administration/administration.service';
import { NotifService } from '../../../shared/Services/NotifSystem/notif.service';
import { Notif } from '../../../shared/Models/NotifSystem/notif.model';
import { DatePipe } from '@angular/common';
import { SignalRService, connection, AutomaticNotification } from '../../../shared/Services/signalR/signal-r.service';
import { UserDetail } from '../../../shared/Models/User/user-detail.model';
@Component({
  selector: 'app-cre-finan-add',
  templateUrl: './cre-finan-add.component.html',
  styleUrls: ['./cre-finan-add.component.css']
})
export class CreFinanAddComponent implements OnInit {

  @Input() public disabled: boolean;
  @Output() public uploadStatuss: EventEmitter<ProgressStatus>;
  @ViewChild('inputFile') inputFile: ElementRef;

  constructor(private UserService: UserServiceService,
    private tblService: TbListeningService,
    private CreanceService: CreanceFinaciereService,
    public serviceupload: UploadDownloadService,
    private toastr: ToastrService,
    private rootUrl: PathSharedService,
    private http: HttpClient,
    private adminService: AdministrationService,
    private notifService: NotifService,
    private signalService: SignalRService)
  { this.uploadStatuss = new EventEmitter<ProgressStatus>(); }

  ngOnInit(): void {
    this.gettbl();
    this.getUserConnected();
    this.getFiles();
    const datePipe = new DatePipe('en-Us');
    this.today = datePipe.transform(new Date(), 'yyyy-MM-dd');
  

   this.userOnLis();
this.userOffLis();
this.logOutLis();
this.getOnlineUsersLis();
this.sendMsgLis();
if (this.signalService.hubConnection.state == 1) this.getOnlineUsersInv();
else {
  this.signalService.ssSubj.subscribe((obj: any) => {
    if (obj.type == "HubConnStarted") {
      this.getOnlineUsersInv();
    }
  });
}
  }

  today;
//Handle Notification
// Hub Configuration
users: connection[] = [];
userOnLis(): void {
  this.signalService.hubConnection.on("userOn", (newUser: connection) => {

    this.users.push(newUser);
  });
}


// Get Offline Users

userOffLis(): void {
  this.signalService.hubConnection.on("userOff", (personId: string) => {
    this.users = this.users.filter(u => u.userId != personId);
  });
}

logOutLis(): void {
  this.signalService.hubConnection.on("logoutResponse", () => {
    localStorage.removeItem("userId");
    location.reload();
  });
}

//Get Online Users

getOnlineUsersInv(): void {
  this.signalService.hubConnection.invoke("getOnlineUsers")
    .catch(err => console.error(err));
}


getOnlineUsersLis(): void {
  this.signalService.hubConnection.on("getOnlineUsersResponse", (onlineUsers: Array<connection>) => {
    this.users = [...onlineUsers];
  });
}

//Send Msg 
text: string;
sendMsgInv(): void {

  this.signalService.GetConnectionByIdUser(this.dirId).subscribe(res => {
    this.userOnline = res;
    this.signalService.hubConnection.invoke("sendMsg", this.userOnline.signalrId, this.text)
      .catch(err => console.error(err));
  })
}


  private sendMsgLis(): void {
  this.signalService.hubConnection.on("sendMsgResponse", (connId: string, msg: string, userConSender: string, userConReceiver: string) => {
    let receiver = this.users.find(u => u.signalrId === connId);
  })
}


// Get Connected List Users
getOnlineUsersList(UserIdConnected) {
  this.signalService.GetConnectionList(UserIdConnected).subscribe(res => {
    this.users = res;
  })
}

// Test If User Connected
userOnline: connection = new connection();
online: boolean;
TestIfUserConnected(userId): boolean {
  this.signalService.TestIfUserConnected(userId).subscribe(res => {
    this.online = res

  })
  return this.online
}


//Dynamic Test of user connected
userConnected: boolean = false;
DynamicTestConnected() {
  if (this.users.filter(item => item.userId == this.dirId).length > 0) {
    this.userConnected = true
  }
}

  // Get Etab Fin List Comptable
  DirDot: UserDetail = new UserDetail();
dirId: string;
dirName: string;
  GetDirDot() {
  this.UserService.GetDotDir().subscribe(res => {
    this.DirDot = res;
  })
}

//Get UserConnected

UserIdConnected: string;
UserNameConnected: string;
  TypeProjet: TbListening[] = [];

  gettbl() {
    this.tblService.GetProjetProg().subscribe(res => {
      this.TypeProjet = res

    })
  }
  notif: Notif = new Notif();
  nom: string;
  adminId: number = 29;
  getUserConnected() {
    this.UserService.getUserProfileObservable().subscribe(res => {
      this.cr.idUserCreator = res.id;
      this.cr.userNameCreator = res.fullName;
      this.UserIdConnected = res.id;
      this.UserNameConnected = res.fullName;
      this.cr.etatdirectorid = res.attribut1;
      this.cr.etatdirectornom = res.directeur;
      this.nom = "الأوقاف والخدمات";
      this.notif.userTransmitterId = res.id;
      this.notif.userTransmitterName = res.fullName;
      this.notif.dateTime = this.date;
      this.notif.date = this.dateTime.getDate().toString() + '-' + (this.dateTime.getMonth() + 1).toString() + '-' + this.dateTime.getFullYear().toString();
      this.notif.time = this.dateTime.getHours().toString() + ':' + this.dateTime.getMinutes().toString();
      this.notif.TextNotification = "طلب  تسديد مستحقات مالية من الموظف  " + res.fullName
      this.notif.serviceName = "طلب  تسديد مستحقات مالية"
      this.notif.readUnread = "0";
      this.notif.serviceId = 4;
      this.adminService.GetById(this.adminId).subscribe(resp => {
        this.cr.iddirproj = resp.description;
        this.cr.nomdirproj = resp.nomDirecteur;
        this.notif.userReceiverId = resp.description;
        this.notif.userReceiverName = resp.nomDirecteur;
     
      })

    })
  }
  autoNotif: AutomaticNotification = new AutomaticNotification();
  cr: CreanceFinanciere = new CreanceFinanciere();
  isValidFormSubmitted = false;
  date = new Date().toLocaleDateString();
  idcr: number;
  dateTime = new Date();

  succ: boolean = false;
  failed: boolean = false;
  msg: string = '';

  onSubmit(form: NgForm) {
    this.cr.dateenreg = this.date;
    this.cr.etat = "في الإنتظار";
    this.cr.etatdirectordate = "في الإنتظار";
    this.cr.etatPayement = "في الإنتظار";
    this.cr.dateetatuser = "في الإنتظار";
    this.cr.etatdirg = "في الإنتظار";
    this.cr.etatrh = "في الإنتظار";
    this.cr.etatdirproj = "في الإنتظار";

    if (form.invalid) {
      this.isValidFormSubmitted = false;

    }
    else {

      this.isValidFormSubmitted = true

      this.CreanceService.Add(this.cr).subscribe(
        res => {
          this.notifService.Add(this.notif).subscribe(res => {
          })
          this.idcr = res.id;
          this.pj.idUserCreator = this.cr.idUserCreator;
          this.pj.date = this.date;
          this.pj.creatorName = this.cr.userNameCreator;
          this.pj.idCF = this.idcr;
          let path = this.rootUrl.getPath();
          this.fileslist.forEach(item => {
            this.pj.path = item;
            console.log(item)
            this.http.post(path + '/PiecesJointesCfs', this.pj)
              .subscribe(res => {
              
              });
          })

          this.toastr.success("تمت الإضافة بنجاح", "نجاح");
          form.resetForm();
          this.succ = true;
          this.failed = false;


          this.msg = "  تمت الإضافة بنجاح"
          this.UserService.GetDotDir().subscribe(res2 => {
            this.DirDot = res2;
            this.text = "طلب تسديد مستحقات مالية";
            this.autoNotif.serviceId = res.id;
            this.autoNotif.pageUrl = "salaire-menu2"
            this.autoNotif.userType = "4";
            this.autoNotif.reponse = "5";
            this.signalService.GetConnectionByIdUser(this.DirDot.id).subscribe(res1 => {
              this.userOnline = res1;
              this.signalService.hubConnection.invoke("sendMsg", this.userOnline.signalrId, this.text, this.autoNotif)
                .catch(err => console.error(err));
            }, err => {
              this.autoNotif.receiverName = this.DirDot.fullName;
                this.autoNotif.receiverId = this.DirDot.id;
              this.autoNotif.transmitterId = this.UserIdConnected;
              this.autoNotif.transmitterName = this.UserNameConnected;
                this.text = "طلب تسديد مستحقات مالية"
              this.autoNotif.vu = "0";


              this.signalService.CreateNotif(this.autoNotif).subscribe(res => {

              })
            })
          })
      },
        err => {
          this.toastr.error("لم يتم التسجيل", "فشل في التسجيل")

          this.failed = true;
          this.succ = false;

          this.msg = " فشل عند الإضافة"
        })
    }
  }


  testCash(event) {
    if (event.target.value != null) {
      this.cr.typePayement = event.target.value
    }
  }

  testBanque(event) {
    if (event.target.value != null) {
      this.cr.typePayement = event.target.value
    }
  }
  testCheque(event) {
    if (event.target.value != null) {
      this.cr.typePayement = event.target.value
    }

  }

  //Files
  //Files
  files1: File[] = [];
  onSelect(event) {
    //console.log(event);
    this.files1.push(...event.addedFiles);
  }

  onRemove(event) {
    this.files1.splice(this.files1.indexOf(event), 1);
  }
  public response: { 'dbpathsasstring': '' };
  public isCreate: boolean;
  public pj: PiecesJointesCF = new PiecesJointesCF();
  public pjs: PiecesJointesCF[];
  public files: string[];

  //get List of Files

  private getFiles() {
    this.serviceupload.getFiles().subscribe(
      data => {
        this.files = data

      }
    );

  }


  //Get file name for Database

  GetFileName() {
    let sa: string;
    let s: any;
    let finalres: any;
    let i: number = 0;
    let tlistnew: any[] = [];
    for (var k = 0; k < this.files.length; k++) {
      sa = <string>this.files[k]
      s = sa.toString().split('uploads\\,', sa.length - 1);
      finalres = s.toString().split('uploads\\', sa.length - 1);

      tlistnew[i] = finalres[1]
      i++;

    }


  }
  Idtransaction: number;
  url: any;
  file: any;
  fileslist: string[] = [];
  public upload(event) {
    if (event.addedFiles && event.addedFiles.length > 0) {
      this.file = event.addedFiles[0];
      this.uploadStatuss.emit({ status: ProgressStatusEnum.START });
      this.serviceupload.uploadFile(this.file).subscribe(
        data => {
          if (data) {
            switch (data.type) {
              case HttpEventType.UploadProgress:
                this.uploadStatuss.emit({ status: ProgressStatusEnum.IN_PROGRESS, percentage: Math.round((data.loaded / data.total) * 100) });
                break;
              case HttpEventType.Response:
                // this.inputFile.nativeElement.value = '';
                this.uploadStatuss.emit({ status: ProgressStatusEnum.COMPLETE });
                break;
            }
            this.getFiles();
            this.GetFileName();



          }

        },

        error => {
          /// this.inputFile.nativeElement.value = '';
          this.uploadStatuss.emit({ status: ProgressStatusEnum.ERROR });
        }
      );
      this.fileslist.push(this.file.name);
      console.log(this.fileslist)
    }
  }


}
